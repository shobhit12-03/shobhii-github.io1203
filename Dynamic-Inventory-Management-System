#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct
{
    int id;
    char name[50];
    float range;
    int quantity;
}
Product;

Product *intializeInventory(int *productCount)
{
    printf("Enter intial number of Products:");
    scanf("%d", productCount);
    Product *inventory = (Product *)calloc(*productCount, sizeof(Product));
    if (productCount == NULL)
    {
        printf("Memory allocation failed");
        exit(1);
    }
    return inventory;
}
void inputProducts(Product *inventory, const int productCount)
{
    for (int i = 0; i < productCount; i++)
    {
        printf("Enter product details%d:\n", i + 1);
        printf("Product Id: ");
        scanf("%d", &inventory[i].id);
        printf("Product Name: ");
        scanf("%s", inventory[i].name);
        printf("Product Range: ");
        scanf("%f", &inventory[i].range);
        printf("Product Quantity: ");
        scanf("%d", &inventory[i].quantity);
    }
}

void addNewProduct(Product **inventory, int *productCount)
{
    *inventory = (Product *)realloc(*inventory, (*productCount + 1) * sizeof(Product));
    if (*inventory == NULL)
    {
        printf("Memory reallocation failed\n");
    }

    Product *newProduct = &((*inventory)[*productCount]);
   printf("\nEnter new product details:\n");
    printf("Product ID: ");
    scanf("%d", &newProduct->id);
    printf("Product Name: ");
    scanf("%s", newProduct->name);
    printf("Product Price: ");
    scanf("%f", &newProduct->range);
    printf("Product Quantity: ");
    scanf("%d", &newProduct->quantity);

    
    (*productCount)++;
    printf("Product added succesfully!\n");
}

void viewAllProducts(Product *inventory, const int productCount)
{
    if (productCount == 0)
    {
        printf("Product unvailable:");
        return;
    }
    printf("======Product list======");

    for (int i = 0; i < productCount; i++)
    {
        printf("Product Id:%d | Name:%s | Range:%2f | quantity%d\n",
               inventory[i].id, inventory[i].name, inventory[i].range, inventory[i].quantity);
    }
}
void updateQuantity(Product *inventory, int productCount)
{
    int productId, found = 0, newQuantity;
    printf("Enter a product id to update quantity:");
    scanf("%d",&newQuantity);

    for (int i = 0; i < productCount; i++)
    {
        if (inventory[i].id == productId)
        {
            printf("Quantity updated succesfully!\n");
            found = 1;
            break;
        }
    }
    if (!found)
        printf("Product not found!\n");
}
void searchProduct(const Product *inventory, const int productCount)
{
    int productId, found = 0;
    printf("Enter a product id to Search:");
    scanf("%d",&productId);

    for (int i = 0; i < productCount; i++)
    {
        if (inventory[i].id == productId)
        {
            printf("Product found:%d | Name:%s | Range:%2f | quantity%d\n",
                   inventory[i].id, inventory[i].name, inventory[i].range, inventory[i].quantity);
            found = 1;
            break;
        }
    }
    if (!found)
        printf("Product not found!\n");
}
void searchName(const Product *inventory, const int productCount)
{
    char keyword[50];
    int found = 0;
    printf("Enter a product id Name to Search:");
    scanf("%s" ,keyword);

    for (int i = 0; i < productCount; i++)
    {
        if (strstr(inventory[i].name , keyword))
        {
            printf("Product Id :%d | Name:%s | Range:%2f | quantity%d\n",
                   inventory[i].id, inventory[i].name, inventory[i].range, inventory[i].quantity);
            found = 1;
            break;
        }
    }
    if (!found)
        printf("No Matching Product found!\n");
}
void searchPriceRange(const Product *inventory, const int productCount)
{
    int found = 0;
    float minPrice, maxPrice;
    printf("Enter minimum price");
    scanf("%f", &minPrice);
    printf("Enter maximum price");
    scanf("%f", &maxPrice);

    printf("Produtc in price range:\n");
    for (int i = 0; i < productCount; i++)
    {
        if (inventory[i].range >= minPrice && inventory[i].range <= maxPrice)
        {
            printf("Product Id:%d | Name:%s | Range:%2f | quantity%d\n",
                   inventory[i].id, inventory[i].name, inventory[i].range, inventory[i].quantity);
            found = 1;
            break;
        }
    }
    if (!found)
        printf("Product not found in this range ");
}
void deleteProduct(Product **inventory, int *productCount)
{
    int found = 0, productId;
    printf(" Enter product to delete ");
    scanf("%d", &productId);

    for (int i = 0; i < *productCount; i++)
    {
        for (int j = i; j < *productCount - 1; i++)
        {
            (*inventory[j] = (*inventory)[j + 1]);
            (*productCount)--;
            *inventory = (Product *)realloc(*inventory, (*productCount) * sizeof(Product));
                printf("Product deleted succesfully!\n");
            found = 1;
            break;
        }
    }
    if (!found)
        printf("Product not found!\n");
}
void displayMenu(Product **inventory, int *productCount)
{
    int choice = 0;
    do
    {
        printf("\n========= INVENTORY MENU =========\n");
        printf("1. Add New Product\n");
        printf("2. View All Products\n");
        printf("3. Update Quantity\n");
        printf("4. Search Product by ID\n");
        printf("5. Search Product by Name\n");
        printf("6. Search Product by Price Range\n");
        printf("7. Delete Product\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            addNewProduct(inventory, productCount);
            break;
        case 2:
            viewAllProducts(*inventory, *productCount);
            break;
        case 3:
            updateQuantity(*inventory, *productCount);
            break;
        case 4:
            searchProduct(*inventory, *productCount);
            break;
        case 5:
            searchName(*inventory, *productCount);
            break;
        case 6:
            searchPriceRange(*inventory, *productCount);
            break;
        case 7:
            deleteProduct(inventory, productCount);
            break;
        case 8:
            printf("Exiting program... Memory released.\n");
            break;
            default:
            printf("Invalid choice! Try again.\n");
        }
    } while (choice != 8);
}
int main()
{
    int productCount;
    Product *inventory = intializeInventory(&productCount);
    inputProducts(inventory, productCount);
    displayMenu(&inventory, &productCount);
    free(inventory);
    return 0;
}
