#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define NAME_SIZE 50

typedef struct
{
    int id;
    char name[NAME_SIZE];
    float range;
    int quantity;
} Product;

typedef enum
{
    ADD_PRODUCT = 1,
    VIEW_PRODUCTS,
    UPDATE_QUANTITY,
    SEARCH_BY_ID,
    SEARCH_BY_NAME,
    SEARCH_BY_PRICE,
    DELETE_PRODUCT,
    EXIT_PROGRAM
} MenuOptions;

Product *intializeInventory(int *productCount)
{
    printf("Enter initial number of Products: ");
    scanf("%d", productCount);

    Product *inventory = (Product *)calloc(*productCount, sizeof(Product));

    if (inventory != NULL)
    {
        return inventory;
    }
    else
    {
        printf("Memory allocation failed!\n");
        return NULL;
    }
}

void inputProducts(Product *inventory, const int productCount)
{
    if (inventory == NULL)
    {
        printf("Inventory not initialized.\n");
        return;
    }

    for (int index = 0; index < productCount; index++)
    {
        printf("\nEnter product details %d:\n", index + 1);

        printf("Product ID: ");
        scanf("%d", &inventory[index].id);

        printf("Product Name: ");
        scanf("%s", inventory[index].name);

        printf("Product Range: ");
        scanf("%f", &inventory[index].range);

        printf("Product Quantity: ");
        scanf("%d", &inventory[index].quantity);
    }
}

void addNewProduct(Product **inventory, int *productCount)
{
    if (*inventory != NULL)
    {
        *inventory = (Product *)realloc(*inventory, (*productCount + 1) * sizeof(Product));

        if (*inventory == NULL)
        {
            printf("Memory reallocation failed!\n");
            return;
        }

        Product *newProduct = &((*inventory)[*productCount]);

        printf("\nEnter new product details:\n");
        printf("Product ID: ");
        scanf("%d", &newProduct->id);
        printf("Product Name: ");
        scanf("%s", newProduct->name);
        printf("Product Price: ");
        scanf("%f", &newProduct->range);
        printf("Product Quantity: ");
        scanf("%d", &newProduct->quantity);

        (*productCount)++;
        printf("Product added successfully!\n");
    }
    else
    {
        printf("Error: Inventory not initialized!\n");
    }
}

void viewAllProducts(Product *inventory, const int productCount)
{
    if (productCount > 0)
    {
        printf("\n====== Product List ======\n");
        for (int index = 0; index < productCount; index++)
        {
            printf("Product ID: %d | Name: %s | Range: %.2f | Quantity: %d\n",
                   inventory[index].id, inventory[index].name, inventory[index].range, inventory[index].quantity);
        }
    }
    else
    {
        printf("No products available.\n");
    }
}

void updateQuantity(Product *inventory, int productCount)
{
    if (inventory == NULL || productCount == 0)
    {
        printf("No inventory data found.\n");
        return;
    }

    int productId, newQuantity, found = 0;

    printf("Enter a product ID to update quantity: ");
    scanf("%d", &productId);

    for (int index = 0; index < productCount; index++)
    {
        if (inventory[index].id == productId)
        {
            printf("Enter new quantity: ");
            scanf("%d", &newQuantity);
            inventory[index].quantity = newQuantity;
            printf("Quantity updated successfully!\n");
            found = 1;
            break;
        }
    }

    if (!found)
    {
        printf("Product not found!\n");
    }
}

void searchProduct(const Product *inventory, const int productCount)
{
    int productId, found = 0;

    printf("Enter a product ID to search: ");
    scanf("%d", &productId);

    for (int index = 0; index < productCount; index++)
    {
        if (inventory[index].id == productId)
        {
            printf("Product Found: ID: %d | Name: %s | Range: %.2f | Quantity: %d\n",
                   inventory[index].id, inventory[index].name, inventory[index].range, inventory[index].quantity);
            found = 1;
            break;
        }
    }

    if (!found)
    {
        printf("Product not found!\n");
    }
}

void searchName(const Product *inventory, const int productCount)
{
    char keyword[NAME_SIZE];
    int found = 0;

    printf("Enter product name keyword to search: ");
    scanf("%s", keyword);

    for (int index = 0; index < productCount; index++)
    {
        if (strstr(inventory[index].name, keyword))
        {
            printf("Product Found: ID: %d | Name: %s | Range: %.2f | Quantity: %d\n",
                   inventory[index].id, inventory[index].name, inventory[index].range, inventory[index].quantity);
            found = 1;
        }
    }

    if (!found)
    {
        printf("No matching product found!\n");
    }
}

void searchPriceRange(const Product *inventory, const int productCount)
{
    float minPrice, maxPrice;
    int found = 0;

    printf("Enter minimum price: ");
    scanf("%f", &minPrice);
    printf("Enter maximum price: ");
    scanf("%f", &maxPrice);

    printf("Products in price range:\n");
    for (int index = 0; index < productCount; index++)
    {
        if (inventory[index].range >= minPrice && inventory[index].range <= maxPrice)
        {
            printf("Product ID: %d | Name: %s | Range: %.2f | Quantity: %d\n",
                   inventory[index].id, inventory[index].name, inventory[index].range, inventory[index].quantity);
            found = 1;
        }
    }

    if (!found)
    {
        printf("No products found in this price range.\n");
    }
}

void deleteProduct(Product **inventory, int *productCount)
{
    if (*inventory == NULL || *productCount == 0)
    {
        printf("No inventory data to delete.\n");
        return;
    }

    int productId, found = 0;

    printf("Enter product ID to delete: ");
    scanf("%d", &productId);

    for (int index = 0; index < *productCount; index++)
    {
        if ((*inventory)[index].id == productId)
        {
            for (int shift = index; shift < *productCount - 1; shift++)
            {
                (*inventory)[shift] = (*inventory)[shift + 1];
            }

            (*productCount)--;
            *inventory = (Product *)realloc(*inventory, (*productCount) * sizeof(Product));

            printf("Product deleted successfully!\n");
            found = 1;
            break;
        }
    }

    if (!found)
    {
        printf("Product not found!\n");
    }
}

void displayMenu(Product **inventory, int *productCount)
{
    int choice = 0;

    do
    {
        printf("\n========= INVENTORY MENU =========\n");
        printf("1. Add New Product\n");
        printf("2. View All Products\n");
        printf("3. Update Quantity\n");
        printf("4. Search Product by ID\n");
        printf("5. Search Product by Name\n");
        printf("6. Search Product by Price Range\n");
        printf("7. Delete Product\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case ADD_PRODUCT:
            addNewProduct(inventory, productCount);
            break;

        case VIEW_PRODUCTS:
            viewAllProducts(*inventory, *productCount);
            break;

        case UPDATE_QUANTITY:
            updateQuantity(*inventory, *productCount);
            break;

        case SEARCH_BY_ID:
            searchProduct(*inventory, *productCount);
            break;

        case SEARCH_BY_NAME:
            searchName(*inventory, *productCount);
            break;

        case SEARCH_BY_PRICE:
            searchPriceRange(*inventory, *productCount);
            break;

        case DELETE_PRODUCT:
            deleteProduct(inventory, productCount);
            break;

        case EXIT_PROGRAM:
            printf("Exiting program... Memory released.\n");
            break;

        default:
            printf("Invalid choice! Try again.\n");
        }
    } while (choice != EXIT_PROGRAM);
}

int main()
{
    int productCount = 0;

    Product *inventory = intializeInventory(&productCount);

    if (inventory != NULL)
    {
        inputProducts(inventory, productCount);
        displayMenu(&inventory, &productCount);
        free(inventory);
    }
    else
    {
        printf("Program terminated due to memory error.\n");
    }

    return 0;
}
