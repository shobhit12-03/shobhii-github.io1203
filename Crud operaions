#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h> // for bool type

struct User
{
    int id;
    char name[50];
    int age;
};

enum MenuOption
{
    CREATE = 1,
    READ,
    UPDATE,
    DELETE,
    EXIT
};

void createUser();
void readUsers();
void updateUser();
void deleteUser();

int main()
{
    int choice;
    bool start = true; // loop control variable

    while (start) // loop will run while start is true
    {
        printf("\n1. Create\n2. Read\n3. Update\n4. Delete\n5. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case CREATE:
            createUser();
            break;
        case READ:
            readUsers();
            break;
        case UPDATE:
            updateUser();
            break;
        case DELETE:
            deleteUser();
            break;
        case EXIT:
            a
                start = false; // stop the loop
            break;
        default:
            printf("Invalid choice\n");
        }
    }

    printf("Exiting program...\n");
    // No return statement; main ends naturally
}

void createUser()
{
    struct User newUser;
    FILE *file = fopen("users.txt", "a");
    if (!file)
    {
        printf("Unable to open file for writing\n");
        return;
    }
    printf("Enter ID Name Age: ");
    scanf("%d %s %d", &newUser.id, newUser.name, &newUser.age);
    fprintf(file, "%d %s %d\n", newUser.id, newUser.name, newUser.age);
    fclose(file);
    printf("Record added successfully\n");
}

void readUsers()
{
    struct User currentUser;
    FILE *file = fopen("users.txt", "r");
    if (!file)
    {
        printf("No records found\n");
        return;
    }
    printf("\nUser Records:\n");
    while (fscanf(file, "%d %s %d", &currentUser.id, currentUser.name, &currentUser.age) == 3)
        printf("ID: %d  Name: %s  Age: %d\n", currentUser.id, currentUser.name, currentUser.age);
    fclose(file);
}

void updateUser()
{
    struct User currentUser;
    FILE *file = fopen("users.txt", "r");
    FILE *tempFile = fopen("temp.txt", "w");
    if (!file)
    {
        printf("No records found\n");
        if (tempFile)
            fclose(tempFile);
        return;
    }

    int searchId, recordFound = 0;
    printf("Enter ID to update: ");
    scanf("%d", &searchId);

    while (fscanf(file, "%d %s %d", &currentUser.id, currentUser.name, &currentUser.age) == 3)
    {
        if (currentUser.id == searchId)
        {
            recordFound = 1;
            printf("Enter new Name and Age: ");
            scanf("%s %d", currentUser.name, &currentUser.age);
        }
        fprintf(tempFile, "%d %s %d\n", currentUser.id, currentUser.name, currentUser.age);
    }

    fclose(file);
    fclose(tempFile);

    remove("users.txt");
    rename("temp.txt", "users.txt");

    if (recordFound)
        printf("Record updated successfully\n");
    else
        printf("ID not found\n");
}

void deleteUser()
{
    struct User currentUser;
    FILE *file = fopen("users.txt", "r");
    FILE *tempFile = fopen("temp.txt", "w");
    if (!file)
    {
        printf("No records found\n");
        if (tempFile)
            fclose(tempFile);
        return;
    }

    int deleteId, recordFound = 0;
    printf("Enter ID to delete: ");
    scanf("%d", &deleteId);

    while (fscanf(file, "%d %s %d", &currentUser.id, currentUser.name, &currentUser.age) == 3)
    {
        if (currentUser.id != deleteId)
            fprintf(tempFile, "%d %s %d\n", currentUser.id, currentUser.name, currentUser.age);
        else
            recordFound = 1;
    }

    fclose(file);
    fclose(tempFile);

    remove("users.txt");
    rename("temp.txt", "users.txt");

    if (recordFound)
        printf("Record deleted successfully\n");
    else
        printf("ID not found\n");
}
